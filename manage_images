#!/bin/bash
BASE_DIR=$(dirname "${0}")

LANG=en_EN

# Get script name
SCRIPT=$(basename ${0})

# Supported distributions and PostgreSQL versions
SUPPORTEDDISTROS="rockylinux8 ubuntu20.04 ubuntu24.04 opensuseleap15.6"
SUPPORTEDPGVERS="9.3 9.4 9.5 9.6 10 11 12 13 14 15 16"

# Ignored combinations, will exit without errors so the CI does not fail
IGNOREDCOMBINATIONS=""

# Parameters for the image
GID=$(id -G|cut -d' ' -f1)
DATE=$(date +%Y%m%dT%H%M%s%N)

# Use podman by default as container engine
CENGINE='podman'

# Default registry
REGISTRY='docker.io'

# Default registry userspace, not configurable for now
NAMESPACE='juliogonzalez'

help() {
  echo ""
  echo "Script to create PostgreSQL container images"
  echo ""
  echo "Syntax: "
  echo ""
  echo "${SCRIPT} <ARGUMENTS>"
  echo ""
  echo "Mandatory arguments:"
  echo ""
  echo " --action=<create|update|updates_report|promote>"
  echo "    * create: will create images from scratch. Output tag will be '<PG_VERSION>-experimental'."
  echo "    * updates_report: will create a report of the images requiring upgrades"
  echo "    * update: will try to update the base image, and PostgreSQL software for all images."
  echo "      Output tag will be '<PG_VERSION>-experimental'."
  echo "    * promote: will promote image(s) by removing tagging then as 'PG_VERSION' without the"
  echo "      '-experimental'."
  echo "    * publish: will push current stable version to a registry"
  echo ""
  echo "Mandatory arguments when --action=publish"
  echo ""
  echo " --username: Username to be used for the registry"
  echo " --password: Password to be used for the registry"
  echo ""
  echo "Optional arguments:"
  echo ""
  echo " --versions=<PG_VERSIONS> A comma separated list of versions"
  echo "                          (supported: $(echo ${SUPPORTEDPGVERS}|sed -e 's/ /, /g'))"
  echo " --distributions=<DISTRIBUTIONS> A comma separated list of distributions"
  echo "                                 (supported: $(echo ${SUPPORTEDDISTROS}|sed -e 's/ /, /g'))"
  echo " --uid=<UID> The UID to be used for bind mounts. If absent, current UID will be used"
  echo " --gid=<GID> The GID to be used for bind mounts. If absemt, current GID will be used"
  echo " --docker    Use docker instead of podman"
  echo " --registry=<REGISTRY> Specify an image registry. If absent, docker.io"
  echo "                       will be used by default"
  echo " --errorcodes If present, it will return the following exit codes:"
  echo "              -1001 if there are updates for current image"
  echo "              -1002 if there are updates for the parent image"
  echo "              -1003 if there are updates for both current and parent images"
  echo ""
  exit 1
}

print_incorrect_syntax() {
  echo "Incorrect syntax (use -h for help)"
}

print_unknown_version() {
  echo "Unknown version ${1} (use -h for help)"
}

print_unknown_distro() {
  echo "Unknown distribution ${1} (use -h for help)"
}

check_updates() {
  local IMAGE_NAME="${1}"
  local DISTRO="${2}"
  local VERSION="${3}"
  local CONTNAME="juliogonzalez-${DISTRO}-postgresql${VERSION}"
  ${CENGINE} run -i -u root --name ${CONTNAME} ${IMAGE_NAME} /opt/check_updates.sh
  local UPDATES=${?}
  ${CENGINE} rm ${CONTNAME} > /dev/null
  return  "${UPDATES}"
}

update_image() {
  local IMAGE_NAME="${1}"
  local DISTRO="${2}"
  local VERSION="${3/-testing}"
  local FULL="${4}"
  local TESTING=0
  if [ "${3##*-}" == "testing" ]; then
    TESTING=1
  fi
  if [ "${FULL}" != "TRUE" ]; then
    NOCACHE='--no-cache'
  fi
  local BASE_IMAGE=$(gawk 'match($0, /^FROM (.*)$/, a) {print a[1]}' ${DISTRO}/Dockerfile)
  ${CENGINE} pull ${BASE_IMAGE}
  ${CENGINE} build --pull --build-arg POSTGRESQL_VER=${VERSION} --build-arg POSTGRESQL_TESTING=${TESTING} --build-arg UID=${BM_UID} --build-arg GID=${BM_GID} --build-arg DATE=${DATE} ${NOCACHE} -t ${IMAGE_NAME} ${DISTRO}/
}

ARGS=$(getopt -o h --long help,action:,versions:,distributions:,uid:,gid:,docker,registry:,username:,password:,errorcodes -n "${SCRIPT}" -- "$@")
if [ $? -ne 0 ];
then
  print_incorrect_syntax
  exit 1
fi
eval set -- "${ARGS}"

# extract options and their arguments into variables
while true ; do
  case "${1}" in
    -h|--help)       help; exit 1 ;;
    --action)        ACTION="${2}"; shift 2 ;;
    --versions)      VERSIONS="${2}"; shift 2;;
    --distributions) DISTROS="${2}"; shift 2;;
    --uid)           BM_UID="${2}"; shift 2;;
    --gid)           BM_GID="${2}"; shift 2;;
    --docker)        CENGINE='docker'; shift 1;;
    --registry)      REGISTRY="${2}"; shift 2;;
    --username)      USERNAME="${2}"; shift 2;;
    --password)      PASSWORD="${2}"; shift 2;;
    --errorcodes)    ERRORCODES='TRUE'; shift 1;;
    --)              shift ; break ;;
    *)               print_incorrect_syntax; exit 1 ;;
  esac
done

# Set default UID/GID if not present
if [ "${BM_UID}" == "" ]; then BM_UID=${UID}; fi
if [ "${BM_GID}" == "" ]; then BM_GID=${GID}; fi

# Check actions
case "${ACTION}" in
  create) ;;
  updates_report) ;;
  update) ;;
  promote) ;;
  publish) ;;
  *) print_incorrect_syntax; exit 1;:
esac

# Check Versions
if [ -z "${VERSIONS}" ]; then
  AVERSIONS="${SUPPORTEDPGVERS}"
else
  AVERSIONS=""
  for VERSION in $(echo ${VERSIONS}|tr ',' ' '); do
     VFOUND=0
     for SVERSION in ${SUPPORTEDPGVERS}; do
       if [ "${VERSION}" == "${SVERSION}" ]; then
         AVERSIONS="${AVERSIONS} ${VERSION}"
         VFOUND=1
       fi
     done
     if [ $VFOUND -eq 0 ]; then
       print_unknown_version "${VERSION}"
       exit 1
     fi
  done
fi

# Check Distributions
if [ -z "${DISTROS}" ]; then
  ADISTROS="${SUPPORTEDDISTROS}"
else
  ADISTROS=""
  for DISTRO in $(echo ${DISTROS}|tr ',' ' '); do
     DFOUND=0
     for SDISTRO in ${SUPPORTEDDISTROS}; do
       if [ "${DISTRO}" == "${SDISTRO}" ]; then
         ADISTROS="${ADISTROS} ${DISTRO}"
         DFOUND=1
       fi
     done
     if [ ${DFOUND} -eq 0 ]; then
       print_unknown_distro "${DISTRO}"
       exit 1
     fi
  done
fi

for IGNOREDCOMBINATION in ${IGNOREDCOMBINATIONS}; do
  IGNOREDDISTRO=$(echo ${IGNOREDCOMBINATION}|cut -d'|' -f1)
  IGNOREDVER=$(echo ${IGNOREDCOMBINATION}|cut -d'|' -f2)
  if [ "${IGNOREDDISTRO}" == "${DISTRO}" ] && [ "${IGNOREDVER}" == "${VERSION}" ]; then
    echo "${IGNOREDDISTRO} with PostgreSQL ${IGNOREDVER} is not available"
    exit 0
  fi
done

for DISTRO in ${ADISTROS}; do
  for VERSION in ${AVERSIONS}; do
    IMAGE_NAME="${REGISTRY}/${NAMESPACE}/${DISTRO}-postgresql:${VERSION}"
    IMAGE_NAME_EXP="${IMAGE_NAME}-experimental"
    if [ "${ACTION}" == "create" ]; then
      echo "================================================================================="
      echo " Creating ${IMAGE_NAME_EXP}..."
      echo "================================================================================="
      update_image ${IMAGE_NAME_EXP} ${DISTRO} ${VERSION} TRUE
    elif [ "${ACTION}" == "updates_report" ]; then
      echo "${DISTRO}|${VERSION}|$(check_updates ${IMAGE_NAME_EXP} ${DISTRO} ${VERSION})"
    elif [ "${ACTION}" == "update" ]; then
      echo "================================================================================="
      echo " Trying to update image ${IMAGE_NAME_EXP}..."
      echo "================================================================================="
      check_updates ${IMAGE_NAME_EXP} ${DISTRO} ${VERSION}
      UPDATES=${?}
      if [ "${UPDATES}" == "0" ]; then
        echo "INFO: No updates available"
        exit 0
      else
        if [ "${UPDATES}" == "2" -o "${UPDATES}" == "3" ]; then
          echo "INFO: Will try to get an updated base image"
        elif [ "${UPDATES}" == "1" -o "${UPDATES}" == "3" ]; then
          echo "INFO: Update will include packages from the parent image"
        fi
        update_image ${IMAGE_NAME_EXP} ${DISTRO} ${VERSION} ${UPDATE_BASE}
        if [ "${ERRORCODES}" == "TRUE" ]; then
          exit -100${UPDATES}
        fi
      fi
    elif [ "${ACTION}" == "promote" ]; then
      echo "================================================================================="
      echo " Promoting ${IMAGE_NAME_EXP} as:"
      echo "  ${IMAGE_NAME}"
      echo "================================================================================="
      ${CENGINE} tag ${IMAGE_NAME_EXP} ${IMAGE_NAME}
    elif [ "${ACTION}" == "publish" ]; then
      echo "================================================================================="
      echo " Publishing ${IMAGE_NAME}..."
      echo "================================================================================="
      ${CENGINE} login --username "${USERNAME}" --password "${PASSWORD}" ${REGISTRY}
      ${CENGINE} push ${IMAGE_NAME}
    fi
  done
done
